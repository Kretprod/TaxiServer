// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250925073324_RemovePassportPhotoUrlFromDriverDetails")]
    partial class RemovePassportPhotoUrlFromDriverDetails
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("server.Models.DriverDetails", b =>
                {
                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<string>("CarNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CarPhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DriverLicenseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DriverLicensePhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DriverId");

                    b.ToTable("DriverDetails");
                });

            modelBuilder.Entity("server.Models.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("server.Models.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Distance")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "distance");

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "driver_id");

                    b.Property<decimal>("DropoffLatitude")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "dropoff_latitude");

                    b.Property<string>("DropoffLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "dropoff_location");

                    b.Property<decimal>("DropoffLongitude")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "dropoff_longitude");

                    b.Property<int>("PassengerId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "passenger_id");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "payment_method");

                    b.Property<decimal>("PickupLatitude")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "pickup_latitude");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "pickup_location");

                    b.Property<decimal>("PickupLongitude")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "pickup_longitude");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("PassengerId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("server.Models.RideHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Distance")
                        .HasColumnType("numeric");

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer");

                    b.Property<decimal>("DropoffLatitude")
                        .HasColumnType("numeric");

                    b.Property<string>("DropoffLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DropoffLongitude")
                        .HasColumnType("numeric");

                    b.Property<int>("PassengerId")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PickupLatitude")
                        .HasColumnType("numeric");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PickupLongitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("RideHistories");
                });

            modelBuilder.Entity("server.Models.VerificationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VerificationCodes");
                });

            modelBuilder.Entity("server.Models.DriverDetails", b =>
                {
                    b.HasOne("server.Models.Driver", "Driver")
                        .WithOne("DriverDetails")
                        .HasForeignKey("server.Models.DriverDetails", "DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("server.Models.Ride", b =>
                {
                    b.HasOne("server.Models.Driver", "Driver")
                        .WithMany("Rides")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("server.Models.Passenger", "Passenger")
                        .WithMany("Rides")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("server.Models.Driver", b =>
                {
                    b.Navigation("DriverDetails");

                    b.Navigation("Rides");
                });

            modelBuilder.Entity("server.Models.Passenger", b =>
                {
                    b.Navigation("Rides");
                });
#pragma warning restore 612, 618
        }
    }
}
